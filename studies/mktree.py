TAB = "    "

def fmtheader(**kwargs):
    header="""#ifndef {NAME}_H
#define {NAME}_H

class {Name}Tree {{

    /**
     * TTree automatically generated by mktree
     */
    
    /* Initialize branches */
    {branch_pntrs}
    public:

        // TTree
        TTree *t;
        // Target file
        TFile* f;

        /* Initialize branch values */
        {branch_vals}
        /* Methods */
        // Constructor
        {Name}Tree();
        // Reset variables
        void reset();
        // Fillers
        int fillBranches();
        // Other
        /* Your methods here */
}};

#endif
    """
    return header.format(**kwargs)

def fmtcpp(**kwargs):
    cpp="""// -*- C++ -*-

// C++
#include <iostream>
#include <vector>
// ROOT
#include \"TBenchmark.h\"
#include \"TChain.h\"
#include \"TDirectory.h\"
#include \"TFile.h\"
#include \"TROOT.h\"
#include \"TTreeCache.h\"
#include \"TString.h\"
// Custom
#include \"{name}.h\"

// Namespaces
using namespace std;

{Name}Tree::{Name}Tree() {{
    // TTree
    t = new TTree("tree", "tree");
    // Branches
    {branch_inits}
}}

void {Name}Tree::reset() {{
    // Reset branch values
    {branch_resets}
    return;
}}

int {Name}Tree::fillBranches() {{
    /* Your code here */
    return 0;
}}
"""
    return cpp.format(**kwargs)

def mkheader(name, branches):
    global TAB

    Name = name.title()
    name = name.lower()
    NAME = name.upper()

    branch_pntrs = ""
    for i, branch in enumerate(branches.keys()):
        to_append = ("TBranch* b_{};\n".format(branch))
        if i > 0:
            to_append = TAB+to_append
        branch_pntrs += to_append

    branch_vals = ""
    j = 0
    for branch, typ in branches.iteritems():
        to_append = ("{0} {1};\n".format(typ, branch))
        if j > 0:
            to_append = TAB+TAB+to_append
        branch_vals += to_append
        j += 1

    formatted_header = fmtheader(Name=Name, NAME=NAME, 
                                 branch_pntrs=branch_pntrs,
                                 branch_vals=branch_vals)

    with open(name+".h", "w") as fout:
        fout.write(formatted_header)

def mkcpp(name, branches):
    global TAB

    Name = name.title()
    name = name.lower()

    branch_inits = ""
    i = 0
    for branch, typ in branches.iteritems():
        branch_args = "\"{0}\", &{0}, \"{0}/{1}\"".format(branch, 
                                                          typ[0].upper())
        branch_init = ("b_{0} = t->Branch({1});\n".format(branch, 
                                                          branch_args))
        if i > 0:
            branch_init = TAB+branch_init
        branch_inits += branch_init
        i += 1

    branch_resets = ""
    j = 0
    for branch, typ in branches.iteritems():
        branch_reset = ("{} = -999;\n".format(branch))
        if j > 0:
            branch_reset = TAB+branch_reset
        branch_resets += branch_reset
        j += 1

    formatted_cpp = fmtcpp(Name=Name, name=name,
                           branch_inits=branch_inits,
                           branch_resets=branch_resets)

    with open(name+".C", "w") as fout:
        fout.write(formatted_cpp)

if __name__ == "__main__":
    branches = {"event": "int", "met": "float", "electron_pt": "float"}
    mkheader("leptons", branches)
    mkcpp("leptons", branches)
