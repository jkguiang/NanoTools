#! /usr/bin/env python

from argparse import ArgumentParser, RawTextHelpFormatter
import json
import os

TAB = "    "
TYPE_MAP = {
    "unsigned int": "i",
    "unsigned long long": "l",
    "float": "F",
    "int": "I",
    "bool": "O",
    "double": "D"
}

def fmtheader(**kwargs):
    header="""#ifndef {NAME}_H
#define {NAME}_H

class {Name}Tree {{

    /**
     * TTree automatically generated by mktree
     */
    
    /* Initialize branches */
    {branch_pntrs}
    public:

        // TTree
        TTree *t;

        /* Initialize branch values */
        {branch_vals}
        /* Methods */
        // Constructor
        {Name}Tree();
        // Reset variables
        void reset();
        // Fillers
        int fillBranches();
        // Other
        /* Your methods here */
}};

#endif
    """
    return header.format(**kwargs)

def fmtcpp(**kwargs):
    cpp="""// -*- C++ -*-

// C++
#include <iostream>
#include <vector>
// ROOT
#include \"TBenchmark.h\"
#include \"TChain.h\"
#include \"TDirectory.h\"
#include \"TFile.h\"
#include \"TROOT.h\"
#include \"TTreeCache.h\"
#include \"TString.h\"
// Custom
#include \"{name}.h\"

// Namespaces
using namespace std;

{Name}Tree::{Name}Tree() {{
    // TTree
    t = new TTree("tree", "tree");
    // Branches
    {branch_inits}
}}

void {Name}Tree::reset() {{
    // Reset branch values
    {branch_resets}
    return;
}}

int {Name}Tree::fillBranches() {{
    /* Your code here */
    return 0;
}}
    """
    return cpp.format(**kwargs)

def mkname(input_name):
    """Make properly capitalized name"""
    input_name = filter(lambda char: char.isalnum() or char == "_", 
                               input_name)
    Name = ""
    name = ""
    NAME = ""
    for subname in input_name.split("_"):
        Name += subname.title()
        name += subname.lower()
        NAME += subname.upper()

    return name, Name, NAME

def mkheader(input_name, branch_names, branch_types):
    """Make C++ header file for variable/method declarations"""
    global TAB

    name, Name, NAME = mkname(input_name)

    branch_pntrs = ""
    for i, branch_name in enumerate(branch_names):
        to_append = ("TBranch* b_{0};\n".format(branch_name))
        if i > 0:
            to_append = TAB+to_append
        branch_pntrs += to_append

    branch_vals = ""
    for i, branch_name in enumerate(branch_names):
        branch_type = branch_types[i]
        to_append = ("{0} {1};\n".format(branch_type, branch_name))
        if i > 0:
            to_append = TAB+TAB+to_append
        branch_vals += to_append

    formatted_header = fmtheader(Name=Name, NAME=NAME, 
                                 branch_pntrs=branch_pntrs,
                                 branch_vals=branch_vals)

    with open(os.getcwd()+"/"+name+".h", "w") as fout:
        fout.write(formatted_header)

    print("Wrote declarations for {0}Tree to {1}.h".format(Name, name))
    return

def mkcpp(input_name, branch_names, branch_types):
    """Make C++ file for function definitions"""
    global TAB
    global TYPE_MAP

    name, Name, _ = mkname(input_name)

    branch_inits = ""
    for i, branch_name in enumerate(branch_names):
        branch_type = branch_types[i]
        branch_ROOT = TYPE_MAP[branch_type]
        branch_args = "\"{0}\", &{0}, \"{0}/{1}\"".format(branch_name, 
                                                          branch_ROOT)
        branch_init = ("b_{0} = t->Branch({1});\n".format(branch_name, 
                                                          branch_args))
        if i > 0:
            branch_init = TAB+branch_init
        branch_inits += branch_init

    branch_resets = ""
    for i, branch_name in enumerate(branch_names):
        branch_type = branch_types[i]
        reset_val = "false" if branch_type == "bool" else -999
        branch_reset = ("{0} = {1};\n".format(branch_name, reset_val))
        if i > 0:
            branch_reset = TAB+branch_reset
        branch_resets += branch_reset

    formatted_cpp = fmtcpp(Name=Name, name=name,
                           branch_inits=branch_inits,
                           branch_resets=branch_resets)

    with open(os.getcwd()+"/"+name+".C", "w") as fout:
        fout.write(formatted_cpp)

    print("Wrote definitions for {0}Tree to {1}.C".format(Name, name))
    return

def mkttree(input_name, config_file, cleanup=False):
    config_type = config_file.split(".")[-1]
    branch_names = []
    branch_types = []
    if config_type == "json":
        with open(config_file, "r") as fin:
            config = json.load(fin)
        for branch, typ in config.iteritems():
            branch_names.append(branch)
            branch_types.append(typ)
    elif config_type == "txt":
        with open(config_file, "r") as fin:
            for line in fin.readlines():
                split_line = line.split()
                input_bname = split_line[-1]
                input_btype = " ".join(split_line[:-1])
                if input_btype not in TYPE_MAP.keys():
                    print("Error: Invalid type in the line below")
                    print(line)
                    return
                branch_names.append(filter(lambda char: char.isalnum() or char == "_", 
                                           input_bname))
                branch_types.append(input_btype)
    else:
        print("Invalid file type")

    mkheader(input_name, branch_names, branch_types)
    mkcpp(input_name, branch_names, branch_types)
    
    if cleanup:
        os.remove(config_file)

    return

if __name__ == "__main__":
    # CLI
    argparser = ArgumentParser(description='Plot cartwheel data.',
                               formatter_class=RawTextHelpFormatter)
    # TTree name
    argparser.add_argument('name', type=str, default=None,
                           help='desired name of TTree')
    # Config file
    argparser.add_argument('config', type=str, default=None,
                           help='path to config json file')
    # Delete branches file
    argparser.add_argument('--cleanup', dest='cleanup', action='store_true',
                           help='delete configuration files after finished')
    args = argparser.parse_args()

    mkttree(args.name, args.config, cleanup=args.cleanup)
